#----------- 下载k8s需要的所有程序包到ansible deployment host
#准备目录
- name: ansible deployment host prepare some dirs
  file: name={{ item }} state=directory
  with_items:
  - "{{ ansible_dir }}/download/packages"
  - "{{ ansible_dir }}/ssl"
  - "{{ ansible_dir }}/bin"
  - "{{ k8s_dir }}/bin"

#设置目录权限
- name: ansible deployment host 本地设置 bin 目录权限
  file: path={{ ansible_dir }}/download/packages state=directory mode=0755 recurse=yes
  file: path={{ ansible_dir }}/bin state=directory mode=0755 recurse=yes
  file: path={{ ansible_dir }}/ssl state=directory mode=0755 recurse=yes
  file: path={{ k8s_dir }}/bin state=directory mode=0755 recurse=yes
  

- name: 下载kubeasyget程序
  copy: src=kubeasyget  dest={{ ansible_dir }}/bin/kubeasyget  mode=0755
  
- name: 下载k8s需要的所有程序包  
  shell: "{{ ansible_dir }}/bin/kubeasyget -D"


#----------- 在ansible deployment host 创建 CA 证书和秘钥
#为确保安全，kubernetes 系统各组件需要使用 x509 证书对通信进行加密和认证,(Certificate Authority)是自签名的根证书，用来签名后续创建的其它证书。
#本文档使用 CloudFlare 的 PKI 工具集 cfssl 创建所有证书。所有操作均在ansible deployment host节点上执行，然后远程分发文件和执行命令。
#CA 证书是集群所有节点共享的，只需要创建一个 CA 证书，后续创建的所有证书都由它签名。
#ansible_dir为ansible deployment host工具存放目录
#k8s_dir为ansible deployment host可执行文件工作目录
- name: 分发证书cfssl工具集到ansible deployment host
  copy: src={{ ansible_dir }}/bin/{{ item }} dest={{ k8s_dir }}/bin/{{ item }} mode=0755
  with_items:
  - cfssl
  - cfssl-certinfo
  - cfssljson


# 注册变量p，根据p的stat信息判断是否已经生成过ca证书，如果没有，下一步生成证书
# 如果已经有ca证书，为了保证整个安装的幂等性，跳过证书生成的步骤
- name: 读取ca证书stat信息
  stat: path="{{ ansible_dir }}/ssl/ca.pem"
  register: p
#CA 配置文件ca-config.json用于配置根证书的使用场景 (profile) 和具体参数 (usage，过期时间、服务端认证、客户端认证、加密等)，后续在签名其它证书时需要指定特定场景。
#证书签名请求文件ca-csr.json
- name: 准备CA配置文件和签名请求
  template: src={{ item }}.j2 dest={{ ansible_dir }}/ssl/{{ item }}
  with_items:
  - "ca-config.json"
  - "ca-csr.json"
  when: p.stat.isreg is not defined

- name: 生成 CA 证书和私钥
  shell: "cd {{ ansible_dir }}/ssl && \
	 {{ k8s_dir }}/bin/cfssl gencert -initca ca-csr.json | {{ k8s_dir }}/bin/cfssljson -bare ca"
  when: p.stat.isreg is not defined     

#----------- 在ansible deployment host 部署 kubectl 命令行工具
- name: 分发证书cfssl工具集到ansible deployment host
  copy: src={{ ansible_dir }}/bin/{{ item }} dest={{ k8s_dir }}/bin/{{ item }} mode=0755
  with_items:
  - kubectl
  
  
#----------- 创建admin kubectl kubeconfig文件--------------------------
#本文档的所有操作均在 ansible deployment host 节点上执行，然后远程分发文件和执行命令
#本文档只需要部署一次，生成的 kubeconfig 文件是通用的，可以拷贝到远程机器
- import_tasks: create-kubectl-kubeconfig.yml
  tags: create_kctl_cfg

#-----------可选创建只读kubeconfig文件: /root/.kube/read.config
- import_tasks: create-kubectl-ro-kubeconfig.yml
  when: "CREATE_READONLY_KUBECONFIG"

#------------创建配置文件: kube-proxy.kubeconfig
- import_tasks: create-kube-proxy-kubeconfig.yml

#------------创建配置文件: kube-controller-manager.kubeconfig
- import_tasks: create-kube-controller-manager-kubeconfig.yml

#------------创建配置文件: kube-scheduler.kubeconfig
- import_tasks: create-kube-scheduler-kubeconfig.yml  


#--------------- ansible 控制端一些易用性配置
- name: 写入ansible deployment host环境变量$PATH 
  lineinfile:
    dest: ~/.bash_profile
    state: present
    regexp: '^export'
    line: 'export PATH={{ k8s_dir }}/bin:$PATH'  
    
- name: ansible 控制端创建 kubectl 软链接
  file: src={{ k8s_dir }}/bin/kubectl dest=/usr/bin/kubectl state=link
  ignore_errors: true

- name: ansible 控制端添加 kubectl 自动补全
  lineinfile:
    dest: ~/.bash_profile
    state: present
    regexp: 'kubectl completion'
    line: 'source <(kubectl completion bash)'


